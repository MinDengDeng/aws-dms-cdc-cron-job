AWSTemplateFormatVersion: "2010-09-09"
Description: Create dms full load cronjob using eventbridge and lambda

Parameters:
  DMSTaskArn:
    Type: String
    Default: ''
    Description: 'the list of the full load task, seperated with ,'

  LambdaDMSCronJobFunctionName:
    Type: String
    Description: Name of the lambda function
    Default: aws-dms-cronjob-function

  EventBridgeScheduledEventName:
    Type: String
    Description: Name of the EventBridge Rules
    Default: aws-dms-cronjob-event-name

  IAMDMSCronJobRoleName:
    Type: String
    Description: IAM role name for lambda
    Default: aws-dms-cronjob-role

  IAMDMSCronJobPolicyName:
    Type: String
    Description: IAM customed managed policy
    Default: aws-dms-cronjob-policy

  DynamoDBHistoryTableName:
    Type: String
    Description: dynamodb to store the history of replication tasks
    Default: aws-dms-cronjob-history

  ScheduledTime:
    Type: String
    Default: 00:00am every day
    AllowedValues:
     # - '00:00am every day | cron(0 0 * * ? *)'
     # - '12:00pm every day | cron(0 12 * * ? *)'
     # - 'every 12 hours | rate(12 hours)'
     # - 'every 24 hours | rate(1 day)'
      - '00:00am every day'
      - '12:00pm every day'
      - 'every 12 hours'
      - 'every 24 hours'
    Description: 'refers to: https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-create-rule-schedule.html'

Conditions:
  00EVERYDAY: !Equals [!Ref ScheduledTime, '00:00am every day']
  12EVERYDAY: !Equals [!Ref ScheduledTime, '12:00pm every day']
  EVERY12H: !Equals [!Ref ScheduledTime, 'every 12 hours']
  EVERY24H: !Equals [!Ref ScheduledTime, 'every 24 hours']

Resources:
  # Lambda functions resources
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: !Ref IAMDMSCronJobPolicyName
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  # DMS permissions
                  - 'dms:StartReplicationTask'
                  - 'dms:DescribeReplicationTasks'

                  # CloudWatch permissions
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'

                Resource: '*'

  LambdaDMSCronJob:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn 
      Code:
        ZipFile: |
              import json
              import boto3
              import os

              def lambda_handler(event, context):
                  print("Cron job trigger")
                  # print time and trigger type

                  _dms_tasks_list = os.environ['dms_tasks'].split(',')

                  client = boto3.client('dms')
                  for _task in _dms_tasks_list:
                      # retrieve the replication task's status
                      _task = _task.strip()
                      _replication_task = client.describe_replication_tasks(
                              Filters=[
                                  {
                                      'Name': 'replication-task-arn',
                                      'Values': [_task]
                                  },
                              ],
                              WithoutSettings=True|False
                      )
                      _load_type = _replication_task['ReplicationTasks'][0]['MigrationType']
                      _status = _replication_task['ReplicationTasks'][0]['Status']
                      print(_task)
                      print(_load_type)
                      print(_status)
                      if _load_type != 'full-load':
                          continue
                      if _status == 'ready':
                          response = client.start_replication_task(
                              ReplicationTaskArn=_task,
                              StartReplicationTaskType='start-replication'
                          )
                      elif _status == 'stopped':
                          response = client.start_replication_task(
                              ReplicationTaskArn=_task,
                              StartReplicationTaskType='reload-target'
                          )
                      else:
                          continue

                  return {
                      'statusCode': 200,
                      'body': json.dumps('StartReplicationTask Successfully!')
                  }

      FunctionName: !Ref LambdaDMSCronJobFunctionName
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          dms_tasks: !Ref DMSTaskArn
      
  EventBridgeScheduledEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Rules to filtering events
      Name: !Ref EventBridgeScheduledEventName
      #ScheduleExpression: !Ref ScheduledTime
      ScheduleExpression: !If [00EVERYDAY, 'cron(0 0 * * ? *)', !If [12EVERYDAY, 'cron(0 12 * * ? *)', !If [EVERY12H, 'rate(12 hours)', !If [EVERY24H, 'rate(1 day)', 'cron(0 0 * * ? *)']]]]  
      Targets: 
        - Arn: !GetAtt LambdaDMSCronJob.Arn 
          Id: !Ref LambdaDMSCronJobFunctionName

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "LambdaDMSCronJobFunctionName"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventBridgeScheduledEvent.Arn 

  DynamoDbHistoryTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Ref DynamoDBHistoryTableName
      AttributeDefinitions: 
        - AttributeName: "taskArn"
          AttributeType: "S"
        - AttributeName: "taskID"
          AttributeType: "S"
        - AttributeName: "scheduledTime"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "taskArn"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      GlobalSecondaryIndexes:
        - IndexName: scheduledTime
          KeySchema:
            - AttributeName: scheduledTime
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"